library(readr)
scaledClonotypeAbundance <- read_csv("scRepertoire_outs/scaledClonotypeAbundance.csv")
View(scaledClonotypeAbundance)
? read_csv
str(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
class(SCA)
SCA %>% select(-...1)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
SCA <- SCA %>% select(-...1)
View(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(scaledClonotypeAbundance)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
SCA <- SCA %>% select(-X)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
str(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
SCA['alpha regions', 'alpha chain', 'beta regions', 'beta chain'] <- str_split_fixed(df$CTstrict, '_', 3)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
library(dplyr)
library(tidyr)
library(stringr)
SCA <- read.csv("scRepertoire_outs/scaledClonotypeAbundance.csv")
SCA <- SCA %>% select(-X)
SCA['alpha regions', 'alpha chain', 'beta regions', 'beta chain'] <- stringr::str_split_fixed(df$CTstrict, '_', 3)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
View(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
View(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
View(SCA)
?unite
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
BiocManager::install("msa")
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
View(SCA)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
rlang::last_error()
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R", echo=TRUE)
stats(seqs$width)
summaru(seqs$width)
summary(seqs$width)
? msa
source("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/data_exploration.R")
save.image("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/scRep-SCA.RData")
library("dplyr")
library("tidyr")
library("msa")
library("ape")
library("phangorn")
library("Biostrings")
library("ggplot2")
library("ggtree")
BiocManager::install("ggtree")
library(RCurl)
remove.packages("RCurl")
BiocManager::install("ggtree")
BiocManager::install("ggtree", force=T)
maskedTCRs <- maskGaps(seqs_msa, min.fraction=0.25, min.block.width=1)
maskedratio(maskedTCRs)
# get distance matrix
alignTCRs <- msaConvert(seqs_msa, type="ape::AAbin")
distMat <- dist.aa(alignTCRs)
library("Biostrings")
library("msa")
library("ape")
library("ggtree")
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.aln.afa", format="fasta")
# convert fast MSA file to DNA multiple alignment object in ape
alignTCRs <- msa::msaConvert(seqs_msa, type="ape::DNAbin")
# calculate distance matrix
distMat <- ape::dist.dna(alignTCRs, pairwise.deletion=T)
# create unrooted nj tree
initialTree <- ape::nj(distMat)
sum(is.na(distMat))
length(distMat)
is.na(distMat)
distMat(is.na(distMat))
distMat[is.na(distMat)]
# calculate distance matrix
distMat <- ape::dist.dna(alignTCRs, model="raw")
distMat[is.na(distMat)]
# create unrooted nj tree
initialTree <- ape::nj(distMat)
?dist.ml
? dist.dna
View(seqs_msa)
ggtree::ggtree(initialTree)
options(ignore.negative.edge=TRUE)
ggtree::ggtree(initialTree)
# create unrooted nj tree
initialTree <- ape::bionj(distMat)
consensusMatrix
?consensusMatrix
options(ignore.negative.edge=TRUE)
ggtree::ggtree(initialTree)
?stringDist
# calculate distance matrix
# Biostrings::consensusMatrix()
distMat <- Biostrings::stringDist(alignTCRs)
View(seqs_msa)
# calculate distance matrix
# Biostrings::consensusMatrix()
distMat <- Biostrings::stringDist(seqs_msa)
View(seqs_msa)
alignTCRs <- Biostrings::DNAStringSet(seqs_msa)
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.aln.afa", format="fasta")
# convert fast MSA file to DNA multiple alignment object in ape
# alignTCRs <- msa::msaConvert(seqs_msa, type="ape::DNAbin")
alignTCRs <- Biostrings::DNAStringSet(seqs_msa)
# calculate distance matrix
# distMat <- ape::dist.dna(alignTCRs, model="raw")
distMat <- Biostrings::stringDist(seqs_msa)
# convert fast MSA file to DNA multiple alignment object in ape
alignTCRs <- msa::msaConvert(seqs_msa, type="ape::DNAbin")
# calculate distance matrix
# distMat <- ape::dist.dna(alignTCRs, model="raw")
distMat <- Biostrings::stringDist(alignTCRs)
# convert fast MSA file to DNA multiple alignment object in ape
# alignTCRs <- msa::msaConvert(seqs_msa, type="ape::DNAbin")
alignTCRs <- Biostrings::DNAStringSet(seqs_msa)
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.aln.afa", format="fasta")
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.aln.afa", format="fasta")
# convert fast MSA file to DNA multiple alignment object in ape
# alignTCRs <- msa::msaConvert(seqs_msa, type="ape::DNAbin")
alignTCRs <- Biostrings::DNAStringSet(seqs_msa)
# calculate distance matrix
# distMat <- ape::dist.dna(alignTCRs, model="raw")
distMat <- Biostrings::stringDist(alignTCRs)
View(seqs_msa)
library("Biostrings")
library("msa")
library("ape")
library("ggtree")
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.aln.afa", format="fasta")
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.clustalo.aln.afa", format="fasta")
# read multiple aligned sequence
seqs_msa <- Biostrings::readDNAMultipleAlignment("testing/full-seqs.clustalo.aln.fa", format="fasta")
# TODO: do I need to mask the gaps for faster/better dist matrix and nj methods?
seqs_msa <- maskGaps(seqs_msa)
# convert fast MSA file to Biostrings file type
alignTCRs <- Biostrings::DNAStringSet(seqs_msa)
# calculate levenshtein distance matrix
distMat <- Biostrings::stringDist(alignTCRs)
View(alignTCRs)
save.image("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/tree_construction.RData")
# create unrooted nj tree
initialTree <- ape::bionj(distMat)
save.image("C:/Users/Mathew/My Drive/LauraRogers/TCR_Repertoire/tree_construction.RData")
# plot tree
options(ignore.negative.edge=TRUE)
ggtree::ggtree(initialTree)
title("Unrooted NJ Tree")
?bionj
? phylo
write.tree(initialTree, file='testing/full-seqs.clustalo-tree.nwk')
write.tree(initialTree, file='testing/full-seqs.clustalo-nj_tree.nwk')
write.tree(initialTree, file='testing/full-seqs.clustalo-nj_tree.nwk', tree.names=T)
? write.nexus
write.nexus(initialTree, file='testing/full-seqs.clustalo-nj_tree.nex')
